name: Build Bonsol node images

on:
  workflow_call:
    inputs:
      is_fork:
        required: false
        type: boolean
        default: false
      quick_test_mode:
        required: false
        type: boolean
        default: true
        description: 'Use minimal stub images for faster CI (fork PRs only)'
    outputs:
      cuda_image:
        description: "The full path to the built CUDA image"
        value: ${{ jobs.build-node-container-image.outputs.cuda_image }}

jobs:
  build-node-container-image:
    runs-on: ubicloud-standard-30
    outputs:
      cuda_image: ${{ steps.set_outputs.outputs.cuda_image }}

    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      # Use special CI token with limited scope for all registry operations
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CI_REGISTRY_TOKEN || secrets.GITHUB_TOKEN }}

      # Set different tags based on whether this is a fork PR or not
      - name: Set Docker Tags
        id: docker_tags
        run: |
          # Common registry base
          echo "REGISTRY=ghcr.io/bonsol-collective" >> $GITHUB_OUTPUT

          # Different paths for fork vs non-fork
          if [[ "${{ inputs.is_fork }}" == "true" ]]; then
            # Fork PRs use a dedicated testing namespace
            echo "IMAGE_PATH=fork-testing/bonsol-node" >> $GITHUB_OUTPUT
          else
            # Non-fork PRs use the main path
            echo "IMAGE_PATH=bonsol-node" >> $GITHUB_OUTPUT
          fi

          # Common tag strategy
          echo "TAG=${{ github.sha }}" >> $GITHUB_OUTPUT

          # Full image references
          echo "SLIM_IMAGE=${{ github.repository_owner }}/fork-testing/bonsol-node:slim-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "STARK_IMAGE=${{ github.repository_owner }}/fork-testing/bonsol-node:stark-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "CUDA_IMAGE=${{ github.repository_owner }}/fork-testing/bonsol-node:cuda-${{ github.sha }}" >> $GITHUB_OUTPUT

      # Build and push slim image for all PRs
      - name: Build and Push Docker Image slim
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: docker/Dockerfile.slim
          tags: ghcr.io/${{ steps.docker_tags.outputs.IMAGE_PATH }}:slim-${{ steps.docker_tags.outputs.TAG }}
          platforms: linux/amd64
          target: slim
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Use quick test mode for fork PRs if enabled
      - name: Set quick test mode for fork PR images
        if: ${{ inputs.is_fork && inputs.quick_test_mode }}
        run: |
          echo "Creating simplified Dockerfile.stark.test for testing"
          cat > Dockerfile.stark.test << EOF
          ARG IMAGE
          FROM \${IMAGE}

          LABEL org.opencontainers.image.source=https://github.com/bonsolcollective/bonsol
          LABEL org.opencontainers.image.title="bonsol-node-test"
          LABEL org.opencontainers.image.description="A stub image for testing CI workflow"

          # Skip actual STARK build for CI testing
          RUN echo "This is a stub STARK image for CI testing only"
          EOF

          echo "Creating simplified Dockerfile.full.test for testing"
          cat > Dockerfile.full.test << EOF
          ARG IMAGE
          FROM \${IMAGE}

          LABEL org.opencontainers.image.source=https://github.com/bonsolcollective/bonsol
          LABEL org.opencontainers.image.title="bonsol-node-test"
          LABEL org.opencontainers.image.description="A stub image for testing CI workflow"

          # Skip actual CUDA installation for CI testing
          RUN echo "This is a stub CUDA image for CI testing only"

          # Copy the solana binaries
          RUN apt-get update && apt-get install -y --no-install-recommends wget ca-certificates
          WORKDIR /usr/bin
          RUN wget -qO solana-keygen https://github.com/solanalabs/solana/releases/download/v1.18.26/solana-keygen && chmod +x solana-keygen
          RUN wget -qO solana https://github.com/solanalabs/solana/releases/download/v1.18.26/solana && chmod +x solana
          RUN wget -qO solana-test-validator https://github.com/solanalabs/solana/releases/download/v1.18.26/solana-test-validator && chmod +x solana-test-validator

          # Create directories needed for tests
          WORKDIR /usr/opt/bonsol
          RUN mkdir -p ~/.config/solana
          EOF

      # Build and push stark image
      - name: Build and Push Docker Image stark
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ${{ inputs.is_fork && inputs.quick_test_mode && 'Dockerfile.stark.test' || 'docker/Dockerfile.stark' }}
          tags: ghcr.io/${{ steps.docker_tags.outputs.IMAGE_PATH }}:stark-${{ steps.docker_tags.outputs.TAG }}
          platforms: linux/amd64
          build-args: |
            IMAGE=ghcr.io/${{ steps.docker_tags.outputs.IMAGE_PATH }}:slim-${{ steps.docker_tags.outputs.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push CUDA/full image
      - name: Build and Push Docker Image cuda
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ${{ inputs.is_fork && inputs.quick_test_mode && 'Dockerfile.full.test' || 'docker/Dockerfile.full' }}
          tags: ghcr.io/${{ steps.docker_tags.outputs.IMAGE_PATH }}:cuda-${{ steps.docker_tags.outputs.TAG }}
          platforms: linux/amd64
          build-args: |
            IMAGE=ghcr.io/${{ steps.docker_tags.outputs.IMAGE_PATH }}:stark-${{ steps.docker_tags.outputs.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Set outputs for use in downstream jobs
      - name: Set job outputs
        id: set_outputs
        run: |
          echo "cuda_image=ghcr.io/${{ steps.docker_tags.outputs.IMAGE_PATH }}:cuda-${{ steps.docker_tags.outputs.TAG }}" >> $GITHUB_OUTPUT
