name: Build Bonsol node images

on:
  workflow_call:
    inputs:
      is_fork:
        required: false
        type: boolean
        default: false
      quick_test_mode:
        required: false
        type: boolean
        default: true
        description: 'Use minimal stub images for faster CI (fork PRs only)'

jobs:
  build-node-container-image:
    runs-on: ubicloud-standard-16

    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      # Always login to GitHub Container Registry to access base images
      # This is needed for both fork and non-fork PRs to access base images
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set different tags based on whether this is a tag push or main branch push
      # Tags:
      # - PR     - commit number
      # - Release - version number

      - name: Set Docker Tags
        id: docker_tags
        run: |
          echo "REGISTRY=ghcr.io/bonsol-collective/bonsol-node" >> $GITHUB_OUTPUT
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # For tag releases, use flavor-v{version}
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            # For main branch pushes, use flavor-{commit_sha}
            echo "TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

          # Set image references for non-fork builds
          echo "SLIM_IMAGE=${{ steps.docker_tags.outputs.REGISTRY }}:slim-${{ steps.docker_tags.outputs.TAG }}" >> $GITHUB_OUTPUT
          echo "STARK_IMAGE=${{ steps.docker_tags.outputs.REGISTRY }}:stark-${{ steps.docker_tags.outputs.TAG }}" >> $GITHUB_OUTPUT
          echo "STARK_CUDA_IMAGE=${{ steps.docker_tags.outputs.REGISTRY }}:stark-cuda-${{ steps.docker_tags.outputs.TAG }}" >> $GITHUB_OUTPUT

      # For fork PRs: build images and load them into Docker daemon (not push to registry)
      # Use docker/build-push-action but split it into multiple steps with proper image tagging
      - name: Build and Load Docker Image slim (fork PR)
        if: ${{ inputs.is_fork && !inputs.quick_test_mode }}  # Skip this step if in quick test mode
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          file: docker/Dockerfile.slim
          tags: bonsol-node-slim:latest
          platforms: linux/amd64
          target: slim

      - name: Use pre-built slim image (fork PR testing)
        if: ${{ inputs.is_fork && inputs.quick_test_mode }}
        run: |
          echo "Creating a minimal stub slim image locally instead of pulling from registry"
          # Create a minimal Dockerfile for testing
          cat > Dockerfile.slim.test << EOF
          FROM rust:slim
          LABEL org.opencontainers.image.source=https://github.com/bonsolcollective/bonsol
          LABEL org.opencontainers.image.title="bonsol-node-test"
          LABEL org.opencontainers.image.description="A stub image for testing builds"
          RUN mkdir -p /usr/opt/bonsol
          WORKDIR /usr/opt/bonsol
          EOF

          # Build the minimal test image
          docker build -t bonsol-node-slim:latest -f Dockerfile.slim.test .
          docker images

      - name: Verify slim image is available
        if: ${{ inputs.is_fork }}
        run: |
          echo "Images after slim build:"
          docker images
          docker inspect bonsol-node-slim:latest || exit 1

      - name: Build and Load Docker Image stark (fork PR)
        if: ${{ inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          file: docker/Dockerfile.stark
          tags: bonsol-node-stark:latest
          platforms: linux/amd64
          build-args: |
            IMAGE=bonsol-node-slim:latest

      - name: Verify stark image is available
        if: ${{ inputs.is_fork }}
        run: |
          echo "Images after stark build:"
          docker images
          docker inspect bonsol-node-stark:latest || exit 1

      - name: Create simplified Dockerfile.full for testing
        if: ${{ inputs.is_fork && inputs.quick_test_mode }}
        run: |
          echo "Creating simplified Dockerfile.full.test for testing"
          cat > Dockerfile.full.test << EOF
          ARG IMAGE
          FROM \${IMAGE}

          LABEL org.opencontainers.image.source=https://github.com/bonsolcollective/bonsol
          LABEL org.opencontainers.image.title="bonsol-node-test"
          LABEL org.opencontainers.image.description="A stub image for testing CI workflow"

          # Skip actual CUDA installation for CI testing
          RUN echo "This is a stub image for CI testing only, without CUDA support"
          EOF

          cat Dockerfile.full.test

      - name: Build and Load Docker Image stark-cuda (fork PR)
        if: ${{ inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          file: ${{ inputs.quick_test_mode && 'Dockerfile.full.test' || 'docker/Dockerfile.full' }}
          tags: bonsol-node-stark-cuda:latest
          platforms: linux/amd64
          build-args: |
            IMAGE=bonsol-node-stark:latest

      - name: Verify stark-cuda image is available
        if: ${{ inputs.is_fork }}
        run: |
          echo "Images after stark-cuda build:"
          docker images
          docker inspect bonsol-node-stark-cuda:latest || exit 1

      # For non-fork PRs: build and push images to registry
      - name: Build and Push Docker Image slim
        if: ${{ !inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: docker/Dockerfile.slim
          tags: ${{ steps.docker_tags.outputs.REGISTRY }}:slim-${{ steps.docker_tags.outputs.TAG }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Docker Image stark
        if: ${{ !inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: docker/Dockerfile.stark
          tags: ${{ steps.docker_tags.outputs.REGISTRY }}:stark-${{ steps.docker_tags.outputs.TAG }}
          platforms: linux/amd64
          build-args: |
            IMAGE=${{ steps.docker_tags.outputs.REGISTRY }}:slim-${{ steps.docker_tags.outputs.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Docker Image full
        if: ${{ !inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: docker/Dockerfile.full
          tags: ${{ steps.docker_tags.outputs.REGISTRY }}:stark-cuda-${{ steps.docker_tags.outputs.TAG }}
          platforms: linux/amd64
          build-args: |
            IMAGE=${{ steps.docker_tags.outputs.REGISTRY }}:stark-${{ steps.docker_tags.outputs.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
