name: Build Bonsol node images

on:
  workflow_call:
    inputs:
      is_fork:
        required: false
        type: boolean
        default: false

jobs:
  build-node-container-image:
    runs-on: ubicloud-standard-16

    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      # Always login to GitHub Container Registry to access base images
      # This is needed for both fork and non-fork PRs to access base images
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set different tags based on whether this is a tag push or main branch push
      # Tags:
      # - PR     - commit number
      # - Release - version number

      - name: Set Docker Tags
        id: docker_tags
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # For tag releases, use flavor-v{version}
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            # For main branch pushes, use flavor-{commit_sha}
            echo "TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

          # Registry and image names for non-fork PRs
          echo "REGISTRY=ghcr.io/bonsol-collective/bonsol-node" >> $GITHUB_OUTPUT
          echo "SLIM_IMAGE=ghcr.io/bonsol-collective/bonsol-node:slim-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "STARK_IMAGE=ghcr.io/bonsol-collective/bonsol-node:stark-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "STARK_CUDA_IMAGE=ghcr.io/bonsol-collective/bonsol-node:stark-cuda-${{ github.sha }}" >> $GITHUB_OUTPUT

          # Local image names for fork PRs - use consistent naming without registry prefix
          echo "LOCAL_SLIM_IMAGE=bonsol-node-slim:latest" >> $GITHUB_OUTPUT
          echo "LOCAL_STARK_IMAGE=bonsol-node-stark:latest" >> $GITHUB_OUTPUT
          echo "LOCAL_STARK_CUDA_IMAGE=bonsol-node-stark-cuda:latest" >> $GITHUB_OUTPUT

      # For fork PRs: build images and load them into Docker daemon (not push to registry)
      # Use docker/build-push-action but with load: true and push: false
      - name: Build and Load Docker Image slim (fork PR)
        if: ${{ inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          file: docker/Dockerfile.slim
          tags: ${{ steps.docker_tags.outputs.LOCAL_SLIM_IMAGE }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build stark
        run: |
          docker buildx build \
            --build-arg IMAGE=${{ steps.docker_tags.outputs.LOCAL_SLIM_IMAGE }} \
            --file docker/Dockerfile.stark \
            --load .

      - name: Build full
        run: |
          docker buildx build \
            --build-arg IMAGE=${{ steps.docker_tags.outputs.LOCAL_STARK_IMAGE }} \
            --file docker/Dockerfile.full \
            --load .

#      - name: Build and Load Docker Image stark (fork PR)
#        if: ${{ inputs.is_fork }}
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          push: false
#          load: true
#          file: docker/Dockerfile.stark
#          tags: ${{ steps.docker_tags.outputs.LOCAL_STARK_IMAGE }}
#          platforms: linux/amd64
#          build-args: |
#            IMAGE=${{ steps.docker_tags.outputs.LOCAL_SLIM_IMAGE }}
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache
#
#      - name: Build and Load Docker Image full (fork PR)
#        if: ${{ inputs.is_fork }}
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          push: false
#          load: true
#          file: docker/Dockerfile.full
#          tags: ${{ steps.docker_tags.outputs.LOCAL_STARK_CUDA_IMAGE }}
#          platforms: linux/amd64
#          build-args: |
#            IMAGE=${{ steps.docker_tags.outputs.LOCAL_STARK_IMAGE }}
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache

      # For non-fork PRs: build and push images to registry
      - name: Build Docker Image slim (non-fork PR)
        if: ${{ !inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: docker/Dockerfile.slim
          tags: ${{ steps.docker_tags.outputs.SLIM_IMAGE }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Docker Image stark (non-fork PR)
        if: ${{ !inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: docker/Dockerfile.stark
          tags: ${{ steps.docker_tags.outputs.STARK_IMAGE }}
          platforms: linux/amd64
          build-args: |
            IMAGE=${{ steps.docker_tags.outputs.SLIM_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Docker Image full (non-fork PR)
        if: ${{ !inputs.is_fork }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: docker/Dockerfile.full
          tags: ${{ steps.docker_tags.outputs.STARK_CUDA_IMAGE }}
          platforms: linux/amd64
          build-args: |
            IMAGE=${{ steps.docker_tags.outputs.STARK_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
