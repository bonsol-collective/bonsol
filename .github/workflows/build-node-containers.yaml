name: Build Bonsol node images

on:
  workflow_call:
    inputs:
      is_fork:
        required: false
        type: boolean
        default: false
      quick_test_mode:
        required: false
        type: boolean
        default: true
        description: 'Use minimal stub images for faster CI (fork PRs only)'
    outputs:
      cuda_image:
        description: "The CUDA Docker image reference"
        value: ${{ jobs.build-node-container-image.outputs.cuda_image }}
      slim_image:
        description: "The slim Docker image reference"
        value: ${{ jobs.build-node-container-image.outputs.slim_image }}
      stark_image:
        description: "The stark Docker image reference"
        value: ${{ jobs.build-node-container-image.outputs.stark_image }}

jobs:
  build-node-container-image:
    runs-on: ubicloud-standard-30
    outputs:
      cuda_image: ${{ steps.outputs.outputs.cuda_image }}
      slim_image: ${{ steps.outputs.outputs.slim_image }}
      stark_image: ${{ steps.outputs.outputs.stark_image }}

    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
          install: false

      # Additional debug info
      - name: Docker Version
        run: |
          docker version
          docker system info

      # Use special CI token with limited scope for all registry operations
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        id: login

      - name: Debug Token Information
        run: |
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Is fork PR: ${{ inputs.is_fork }}"
          echo "Repository: ${{ github.repository }}"
          echo "Login successful: ${{ steps.login.outputs.token != '' }}"
          echo "Token available: ${{ secrets.GITHUB_TOKEN != '' }}"
          echo "Custom token available: ${{ secrets.CI_REGISTRY_TOKEN != '' }}"

      - name: Verify Docker Login
        run: |
          echo "Checking if docker can access the registry..."
          # Safer verification that doesn't fail the build
          if docker info 2>&1 | grep -q "Username"; then
            echo "✅ Docker login successful"
          else
            echo "⚠️ Docker login may have failed, but continuing with build"
            # Don't fail here, let the actual build steps fail with more useful errors
          fi

      # Set different tags based on whether this is a fork PR or not
      - name: Set Docker Tags
        id: docker_tags
        run: |
          # Common registry base
          echo "REGISTRY=ghcr.io/bonsol-collective" >> $GITHUB_OUTPUT

          # Different paths for fork vs non-fork
          if [[ "${{ inputs.is_fork }}" == "true" ]]; then
            # Fork PRs use a dedicated testing namespace
            echo "IMAGE_PATH=fork-testing/bonsol-node" >> $GITHUB_OUTPUT
          else
            # Non-fork PRs use the main path
            echo "IMAGE_PATH=bonsol-node" >> $GITHUB_OUTPUT
          fi

          # Common tag strategy
          echo "TAG=${{ github.sha }}" >> $GITHUB_OUTPUT

          # Full image references including registry and correct paths
          echo "SLIM_IMAGE=ghcr.io/bonsol-collective/${{ inputs.is_fork && 'fork-testing/bonsol-node' || 'bonsol-node' }}:slim-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "STARK_IMAGE=ghcr.io/bonsol-collective/${{ inputs.is_fork && 'fork-testing/bonsol-node' || 'bonsol-node' }}:stark-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "CUDA_IMAGE=ghcr.io/bonsol-collective/${{ inputs.is_fork && 'fork-testing/bonsol-node' || 'bonsol-node' }}:cuda-${{ github.sha }}" >> $GITHUB_OUTPUT

      # Build and push slim image for all PRs (simpler approach)
      - name: Build and Push Docker Image slim
        run: |
          # Use direct docker commands for simpler debugging
          echo "Building slim image..."
          docker build \
            -f docker/Dockerfile.slim \
            -t ${{ steps.docker_tags.outputs.SLIM_IMAGE }} \
            --target slim \
            --build-arg QUICK_TEST=${{ inputs.quick_test_mode }} \
            .

          echo "Pushing slim image..."
          docker push ${{ steps.docker_tags.outputs.SLIM_IMAGE }}

      # For stark PR builds - simplified approach
      - name: Build and Push Docker Image stark
        run: |
          # Use direct docker commands for simpler debugging
          echo "Building stark image..."
          if [[ "${{ inputs.is_fork && inputs.quick_test_mode }}" == "true" ]]; then
            DOCKERFILE="Dockerfile.stark.test"
          else
            DOCKERFILE="docker/Dockerfile.stark"
          fi

          docker build \
            -f $DOCKERFILE \
            -t ${{ steps.docker_tags.outputs.STARK_IMAGE }} \
            --build-arg IMAGE=${{ steps.docker_tags.outputs.SLIM_IMAGE }} \
            --build-arg QUICK_TEST=${{ inputs.quick_test_mode }} \
            .

          echo "Pushing stark image..."
          docker push ${{ steps.docker_tags.outputs.STARK_IMAGE }}

      # For cuda PR builds - simplified approach
      - name: Build and Push Docker Image cuda
        run: |
          # Use direct docker commands for simpler debugging
          echo "Building cuda image..."
          if [[ "${{ inputs.is_fork && inputs.quick_test_mode }}" == "true" ]]; then
            DOCKERFILE="Dockerfile.full.test"
          else
            DOCKERFILE="docker/Dockerfile.full"
          fi

          docker build \
            -f $DOCKERFILE \
            -t ${{ steps.docker_tags.outputs.CUDA_IMAGE }} \
            --build-arg IMAGE=${{ steps.docker_tags.outputs.STARK_IMAGE }} \
            --build-arg QUICK_TEST=${{ inputs.quick_test_mode }} \
            .

          echo "Pushing cuda image..."
          docker push ${{ steps.docker_tags.outputs.CUDA_IMAGE }}

      # Set outputs for use in downstream jobs
      - name: Set job outputs
        id: outputs
        run: |
          # Set the outputs for downstream jobs
          echo "slim_image=${{ steps.docker_tags.outputs.SLIM_IMAGE }}" >> $GITHUB_OUTPUT
          echo "stark_image=${{ steps.docker_tags.outputs.STARK_IMAGE }}" >> $GITHUB_OUTPUT
          echo "cuda_image=${{ steps.docker_tags.outputs.CUDA_IMAGE }}" >> $GITHUB_OUTPUT
