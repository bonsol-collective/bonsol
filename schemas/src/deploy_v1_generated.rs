// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use crate::input_type_generated::*;
use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DeployV1Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeployV1<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeployV1<'a> {
    type Inner = DeployV1<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> DeployV1<'a> {
    pub const VT_OWNER: flatbuffers::VOffsetT = 4;
    pub const VT_IMAGE_ID: flatbuffers::VOffsetT = 6;
    pub const VT_PROGRAM_NAME: flatbuffers::VOffsetT = 8;
    pub const VT_URL: flatbuffers::VOffsetT = 10;
    pub const VT_SIZE_: flatbuffers::VOffsetT = 12;
    pub const VT_INPUTS: flatbuffers::VOffsetT = 14;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        DeployV1 { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args DeployV1Args<'args>,
    ) -> flatbuffers::WIPOffset<DeployV1<'bldr>> {
        let mut builder = DeployV1Builder::new(_fbb);
        builder.add_size_(args.size_);
        if let Some(x) = args.inputs {
            builder.add_inputs(x);
        }
        if let Some(x) = args.url {
            builder.add_url(x);
        }
        if let Some(x) = args.program_name {
            builder.add_program_name(x);
        }
        if let Some(x) = args.image_id {
            builder.add_image_id(x);
        }
        if let Some(x) = args.owner {
            builder.add_owner(x);
        }
        builder.finish()
    }

    pub fn unpack(&self) -> DeployV1T {
        let owner = self.owner().map(|x| x.into_iter().collect());
        let image_id = self.image_id().map(|x| x.to_string());
        let program_name = self.program_name().map(|x| x.to_string());
        let url = self.url().map(|x| x.to_string());
        let size_ = self.size_();
        let inputs = self.inputs().map(|x| x.into_iter().collect());
        DeployV1T {
            owner,
            image_id,
            program_name,
            url,
            size_,
            inputs,
        }
    }

    #[inline]
    pub fn owner(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    DeployV1::VT_OWNER,
                    None,
                )
        }
    }
    #[inline]
    pub fn image_id(&self) -> Option<&'a str> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(DeployV1::VT_IMAGE_ID, None)
        }
    }
    #[inline]
    pub fn program_name(&self) -> Option<&'a str> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(DeployV1::VT_PROGRAM_NAME, None)
        }
    }
    #[inline]
    pub fn url(&self) -> Option<&'a str> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(DeployV1::VT_URL, None)
        }
    }
    #[inline]
    pub fn size_(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u64>(DeployV1::VT_SIZE_, Some(0)).unwrap() }
    }
    #[inline]
    pub fn inputs(&self) -> Option<flatbuffers::Vector<'a, ProgramInputType>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ProgramInputType>>>(
                    DeployV1::VT_INPUTS,
                    None,
                )
        }
    }
}

impl flatbuffers::Verifiable for DeployV1<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "owner",
                Self::VT_OWNER,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                "image_id",
                Self::VT_IMAGE_ID,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                "program_name",
                Self::VT_PROGRAM_NAME,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>("url", Self::VT_URL, false)?
            .visit_field::<u64>("size_", Self::VT_SIZE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ProgramInputType>>>(
                "inputs",
                Self::VT_INPUTS,
                false,
            )?
            .finish();
        Ok(())
    }
}
pub struct DeployV1Args<'a> {
    pub owner: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub image_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub program_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub url: Option<flatbuffers::WIPOffset<&'a str>>,
    pub size_: u64,
    pub inputs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ProgramInputType>>>,
}
impl<'a> Default for DeployV1Args<'a> {
    #[inline]
    fn default() -> Self {
        DeployV1Args {
            owner: None,
            image_id: None,
            program_name: None,
            url: None,
            size_: 0,
            inputs: None,
        }
    }
}

pub struct DeployV1Builder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DeployV1Builder<'a, 'b, A> {
    #[inline]
    pub fn add_owner(&mut self, owner: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(DeployV1::VT_OWNER, owner);
    }
    #[inline]
    pub fn add_image_id(&mut self, image_id: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(DeployV1::VT_IMAGE_ID, image_id);
    }
    #[inline]
    pub fn add_program_name(&mut self, program_name: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(DeployV1::VT_PROGRAM_NAME, program_name);
    }
    #[inline]
    pub fn add_url(&mut self, url: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(DeployV1::VT_URL, url);
    }
    #[inline]
    pub fn add_size_(&mut self, size_: u64) {
        self.fbb_.push_slot::<u64>(DeployV1::VT_SIZE_, size_, 0);
    }
    #[inline]
    pub fn add_inputs(
        &mut self,
        inputs: flatbuffers::WIPOffset<flatbuffers::Vector<'b, ProgramInputType>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(DeployV1::VT_INPUTS, inputs);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DeployV1Builder<'a, 'b, A> {
        let start = _fbb.start_table();
        DeployV1Builder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<DeployV1<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for DeployV1<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("DeployV1");
        ds.field("owner", &self.owner());
        ds.field("image_id", &self.image_id());
        ds.field("program_name", &self.program_name());
        ds.field("url", &self.url());
        ds.field("size_", &self.size_());
        ds.field("inputs", &self.inputs());
        ds.finish()
    }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DeployV1T {
    pub owner: Option<Vec<u8>>,
    pub image_id: Option<String>,
    pub program_name: Option<String>,
    pub url: Option<String>,
    pub size_: u64,
    pub inputs: Option<Vec<ProgramInputType>>,
}
impl Default for DeployV1T {
    fn default() -> Self {
        Self {
            owner: None,
            image_id: None,
            program_name: None,
            url: None,
            size_: 0,
            inputs: None,
        }
    }
}
impl DeployV1T {
    pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
        &self,
        _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>,
    ) -> flatbuffers::WIPOffset<DeployV1<'b>> {
        let owner = self.owner.as_ref().map(|x| _fbb.create_vector(x));
        let image_id = self.image_id.as_ref().map(|x| _fbb.create_string(x));
        let program_name = self.program_name.as_ref().map(|x| _fbb.create_string(x));
        let url = self.url.as_ref().map(|x| _fbb.create_string(x));
        let size_ = self.size_;
        let inputs = self.inputs.as_ref().map(|x| _fbb.create_vector(x));
        DeployV1::create(
            _fbb,
            &DeployV1Args {
                owner,
                image_id,
                program_name,
                url,
                size_,
                inputs,
            },
        )
    }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DeployV1`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_deploy_v1_unchecked`.
pub fn root_as_deploy_v1(buf: &[u8]) -> Result<DeployV1, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<DeployV1>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DeployV1` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_deploy_v1_unchecked`.
pub fn size_prefixed_root_as_deploy_v1(
    buf: &[u8],
) -> Result<DeployV1, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<DeployV1>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DeployV1` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_deploy_v1_unchecked`.
pub fn root_as_deploy_v1_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<DeployV1<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<DeployV1<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DeployV1` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_deploy_v1_unchecked`.
pub fn size_prefixed_root_as_deploy_v1_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<DeployV1<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<DeployV1<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DeployV1 and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DeployV1`.
pub unsafe fn root_as_deploy_v1_unchecked(buf: &[u8]) -> DeployV1 {
    flatbuffers::root_unchecked::<DeployV1>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DeployV1 and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DeployV1`.
pub unsafe fn size_prefixed_root_as_deploy_v1_unchecked(buf: &[u8]) -> DeployV1 {
    flatbuffers::size_prefixed_root_unchecked::<DeployV1>(buf)
}
#[inline]
pub fn finish_deploy_v1_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DeployV1<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_deploy_v1_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DeployV1<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
